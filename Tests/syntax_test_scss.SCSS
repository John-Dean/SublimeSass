// SYNTAX TEST "Packages/SASS/Syntaxes/SCSS.sublime-syntax"

/*
  Nested selectors and &
  http://sass-lang.com/documentation/file.SASS_REFERENCE.html#nested_rules
  Variables and !global etc
  http://sass-lang.com/documentation/file.SASS_REFERENCE.html#variables_
*/

#main p {
//      ^ punctuation.section.property-list.begin.css
  color: #00ff00;
  height: 97%;
  $width: 5em !global;
//^^^^^^ variable.declaration.scss
//^ punctuation.definition.variable.scss
//            ^^^^^^^ keyword.other.scss
  width: $width;
//^^^^^ meta.property-name.css
// ^ support.type.property-name.css
//     ^ punctuation.separator.key-value.css
//      ^^^^^^^ meta.property-value.css
//       ^^^^^^ variable.other.scss
//       ^ punctuation.definition.variable.scss
//             ^ punctuation.terminator.statement.css

  .redbox {
    background-color: #ff0000;
    color: #000000;
  }
  &:hover { text-decoration: underline; }
  body.firefox & { font-weight: normal; }
}
// <- punctuation.section.property-list.end.css

/*
  Nested properties
  http://sass-lang.com/documentation/file.SASS_REFERENCE.html#nested_properties
*/

.funky {
  font: {
    family: fantasy;
//                ^ meta.property-value.css support.constant.font-name.css
//  ^ meta.property-name.css support.type.property-name.css
    size: 30em;
//  ^ meta.property-name.css support.type.property-name.css
    weight: bold;
//  ^ meta.property-name.css support.type.property-name.css
  }
  font: 20px/24px fantasy {
//                ^ meta.property-value.css support.constant.font-name.css
//  ^ meta.property-name.css support.type.property-name.css
    weight: bold;
//  ^ meta.property-name.css support.type.property-name.css
  }
}


/*
  Comments
  http://sass-lang.com/documentation/file.SASS_REFERENCE.html#comments
  block comment contains #{ $variable }
  block comment contains #{ function($variable) + "escap\e" + -.5em }
*/
// <- comment.block.css punctuation.definition.comment.css

// line comment
// line comment contains #{ $variable }
// line comment contains #{ function($variable) + "escap\e" + -.5em }
// <- comment.line.double-slash.scss punctuation.definition.comment.css


/*
  Strings and interpolation
  http://sass-lang.com/documentation/file.SASS_REFERENCE.html#sass-script-strings
  http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interpolation_
*/
@mixin firefox-message($selector) {
// <- meta.at-rule.scss punctuation.definition.keyword.scss
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.scss
// ^ keyword.control.at-rule.scss
//     ^^^^^^^^^^^^^^^ entity.name.function.scss
//                    ^ meta.group.scss meta.function.parameters.scss punctuation.section.group.begin.scss
//                              ^ meta.group.scss meta.function.parameters.scss punctuation.section.group.end.scss
//                     ^^ meta.function.parameters.scss variable.other.scss
//                     ^ punctuation.definition.variable.scss
  body.firefox #{$selector}:before {
    content: "Hi, Firefox users!";
  }
}

@include firefox-message(".header");


// id selectors
#id {}

#id-#{$variable}-selector {}

#id-#{$variable}-#{$variable} {}

#id-#{$variable}-selector,
#another-id-selector {}

#id-#{$variable}-selector, #another-id-selector {}

#id:hover::before {}

#id:not(body)::before {} // body should be highlighted as type selector not value

#id:not(body):not(#id):not(.class):not(:first-child) {}

#id:not(#{$variable})::before {}


.class {}

.class-#{$variable}-selector {}

.class-#{$variable}-#{$variable} {}

.class-#{$variable}-selector,
.another-class-selector {}

.class-#{$variable}-selector, .another-class-selector {}

.class:haver::before {}

.class:not(body)::before {}

.class:not(body):not(#id):not(.class):not(:first-child) {}

.class:not(#{$variable})::before {}


#id.class:nth-of-type(2n) {}

.class#id:nth-child(2n-1) {}
.class#id:nth-child(2n+1) {}
.class#id:nth-child(2n - 1) {}


#id .class,
#id > .class,
#id ~ .class,
#id + .class {}


*,
*::before,
*::after {}


#{$variable}::before {}

##{$variable}-selector::before {}

.#{$variable}-selector::before {}


[attr] {}
a[title] {} // title should be highlighted as attribution, not type selector
a[href=""] {}
a[href=ab-_a123c] {}
a[href*=""] {}
a[href^=""] {}
a[href$=""] {}
a[data-*=""] {}
a[data~=""] {}
a[data|=""] {}


%placeholder {}

@extend %placeholder-a1o_321;

%#{$variable}-placeholder {} // Interpoluation in placeholder selector


::-webkit-selection {}
::selection {}


.block {
  &.class {}
  &::before {}

  &__element {}
  &--modifier {}
  &__element--#{$modifier} {}

  &#{$variable} {}

  &:not(&-#{$variable}) {}
}


:root {
  --css-variable_123: 20px;
}

body {
  padding: var(--css-variable_123);
  proprety-#{$variable}: value;
  #{$var}-proprety: value;
  proprety-#{$var}-proprety: value;
}


$variable: 123px;
$variable123: #fff;
$va1ri2ab3le-321a: #ABCDEF !default;
$_va1ri_2ab3le_321a: inline !important;
$variable: function($variable);

$map: (
  body: (
    width-1: 200px * $variable #{$variable} 'stirng',
    height: (
      "key": 200px * $variable #{$variable} 'stirng' function(),
      key: (
        "key": 200px * $variable #{$variable} 'stirng' function()
      )
    )
  )
);


@for $i from 1 through 3 {
  .item-#{$i} { width: 2em * $i; }
}

@each $animal, $color, $cursor in (puma, black, default),
                                  (sea-slug, blue, pointer),
                                  (egret, white, move) {
  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
    border: 2px solid $color;
    cursor: $cursor;
  }
}


$map: (
  key-1: #000,
  key-2: (
    key-3: 123px
  )
);

body {
  content: "double quoted string";
  content: 'single quoted string';
  content: "broken double quoted string will not be highlighted;
  content: 'broken single quoted string will not be highlighted;
  content: "double quoted string contains \escape";
  content: 'single quoted string contains \escape';
  content: "double quoted string contains #{ $variable }";
  content: 'single quoted string contains #{ $variable }';
  content: "double quoted string contains #{ function($variable) + -.5em }";
  content: 'single quoted string contains #{ function($variable) + -.5em }';
}

body {
  width: 123px;
  width: .123px;
  width: -321.123px;
  width: -.123px;
  width: -#{$number}px;
  width: -$variable;
  width: -($variable * 2);
  width: 20px+20px;
  width: auto;

  background: url(../../assets/image.pn
  background: url(../../assets/image.png);

  content: attr(data-att
  content: attr(data-attr);
}


a {
  text-align: center; display: block; line-height: 1.5; background: red;
}


@mixin mixin() {}
@mixin mixin-123_1eaf2u () {}

@function function($a, $b, $c...) {}

@include mixin() {}
@include mixin-123_1eaf2u {}

@else if {}
@if not {}
@if $a or $b {}

@media only screen and (max-width: 100px) and (min-width: 50px) {}

@media print {}


// TODO

body {
  background-image: url(if($bootstrap-sass-asset-helper, twbs-image-path("#{$file-1x}"), "#{$file-1x}"));
}

body::before {
  content '
multiple line string
';
}

#fff {
  box-shadow: 0 0 0 #fff,
    0 0 0 #fff,
    0 0 0 #fff;
}
